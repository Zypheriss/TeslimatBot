const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const dataManager = require('../utils/dataManager');
const cooldownManager = require('../utils/cooldownManager');
const logger = require('../utils/logger');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('kodkullan')
        .setDescription('Kod kullanarak stok al')
        .addStringOption(option =>
            option.setName('kod')
                .setDescription('Kod ≈üifresi')
                .setRequired(true)),

    async execute(interaction) {
        const kodSifre = interaction.options.getString('kod');
        const userId = interaction.user.id;
        if (cooldownManager.isOnCooldown(userId)) {
            const kalanSure = cooldownManager.getRemainingTime(userId);
            const formatliSure = cooldownManager.formatTime(kalanSure);
            
            return await interaction.reply({
                content: `‚è≥ Hen√ºz tekrar kod kullanamazsƒ±nƒ±z! Kalan s√ºre: **${formatliSure}**`,
                flags: 64 
            });
        }

        const kodData = dataManager.getKodlar();
        const stokData = dataManager.getStoklar();
        if (!kodData.aktifKodlar || !kodData.aktifKodlar[kodSifre]) {
            return await interaction.reply({
                content: '‚ùå Ge√ßersiz kod!',
                flags: 64 
            });
        }

        const kod = kodData.aktifKodlar[kodSifre];
        const kategoriId = kod.kategoriId;
        const kategoriStoklar = stokData.stoklar[kategoriId] || [];
        if (kategoriStoklar.length === 0) {
            return await interaction.reply({
                content: '‚ùå Bu kategoride stok kalmamƒ±≈ü!',
                flags: 64 
            });
        }
        const alinanStok = kategoriStoklar.shift();
        stokData.stoklar[kategoriId] = kategoriStoklar;
        kod.adet--;
        if (kod.adet <= 0) {
            delete kodData.aktifKodlar[kodSifre];
        }
        cooldownManager.setCooldown(userId);
        logger.logKod('Kod Kullanƒ±ldƒ±', userId, kodSifre, kategoriId, `Stok alƒ±ndƒ±: ${alinanStok}`);
        logger.logActivity('Kod Kullanƒ±ldƒ±', userId, `Kod: ${kodSifre}, Stok: ${alinanStok}`);
        dataManager.saveStoklar(stokData);
        dataManager.saveKodlar(kodData);
        try {
            const kategori = stokData.kategoriler[kategoriId];
            
            const dmEmbed = new EmbedBuilder()
                .setTitle('üéâ Stok Teslimatƒ±')
                .setDescription('Kod kullanƒ±mƒ±nƒ±z ba≈üarƒ±lƒ±!')
                .addFields(
                    { name: 'Kategori', value: `${kategori.emoji || 'üì¶'} ${kategori.name}`, inline: true },
                    { name: 'Stok', value: `\`\`\`${alinanStok}\`\`\``, inline: false }
                )
                .setColor(0x00AE86)
                .setTimestamp();

            await interaction.user.send({ embeds: [dmEmbed] });

            await interaction.reply({
                content: '‚úÖ Kod ba≈üarƒ±yla kullanƒ±ldƒ±! Stok DM √ºzerinden g√∂nderildi.',
                flags: 64 
            });

        } catch (error) {
            await interaction.reply({
                content: `‚úÖ Kod ba≈üarƒ±yla kullanƒ±ldƒ±!\n\n**Stoƒüunuz:**\n\`\`\`${alinanStok}\`\`\``,
                flags: 64 
            });
        }
    }
};